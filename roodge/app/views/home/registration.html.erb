<br><h2>Form di registrazione</h2>

<div class="card">
    <div class="card-body">
        <%= form_with model: @user, url: registration_path, method: :post, local: true, multipart: true do |form| %>

            <div class="row mb-3">
                <div class="col-md-6">
                    <%= form.label :nome, "Nome", class: "form-label" %>  
                    <%= form.text_field :nome, class: "form-control", required: true, pattern: "[A-Za-zÀ-ÖØ-öø-ÿ\s]+", title: "Il nome può contenere solo lettere e spazi" %>
                </div>
                <div class="col-md-6">
                    <%= form.label :cognome, "Cognome", class: "form-label" %>  
                    <%= form.text_field :cognome, class: "form-control", required: true, pattern: "[A-Za-zÀ-ÖØ-öø-ÿ\s]+", title: "Il cognome può contenere solo lettere e spazi" %>
                </div>
            </div>
            
            <div class="row mb-3">
                <div class="col-md-6">
                    <%= form.label :cf, "Codice Fiscale", class: "form-label" %>  
                    <%= form.text_field :cf, class: "form-control", required: true, pattern: "[A-Za-z]{6}[0-9]{2}[A-Za-z][0-9]{2}[A-Za-z][0-9]{3}[A-Za-z]", title: "Il codice fiscale deve seguire il formato corretto (es. ABCDEF12G34H567I)" %>
                </div>
                <div class="col-md-6">
                    <%= form.label :data_nascita, "Data di nascita", class: "form-label" %>
                    <%= form.date_field :data_nascita, class: "form-control", required: true %>
                </div>
            </div>
            
            <div class="row mb-3">
                <div class="col-md-6">
                    <%= form.label :citta_nascita, "Città di nascita", class: "form-label" %>  
                    <%= form.text_field :citta_nascita, class: "form-control", required: true, pattern: "[A-Za-zÀ-ÖØ-öø-ÿ\s]+", title: "La città di nascita può contenere solo lettere e spazi" %>
                </div>
                <div class="col-md-6">
                    <%= form.label :indirizzo_residenza, "Indirizzo di residenza", class: "form-label" %>
                    <%= form.text_field :indirizzo_residenza, class: "form-control", required: true %>
                </div>
            </div>
            
            <div class="row mb-3">
                <div class="col-md-6">
                    <%= form.label :mail, "Indirizzo email", class: "form-label" %>  
                    <%= form.email_field :mail, class: "form-control", required: true, pattern: "[A-Za-z0-9\.]+@[A-Za-z0-9]+\.[A-Za-z]{2,}", title: "La mail deve contenere il carattere @ e non può avere altri simboli al di fuori del ." %>
                </div>
                <div class="col-md-6">
                    <%= form.label :ruolo, "Ruolo", class: "form-label" %>
                    <%= form.select :ruolo, options_for_select([["Studente", "s"], ["Docente", "d"]], selected: ""), {prompt: "--Nessuna selezione--"}, {class: "form-control", required: true} %>
                </div>
            </div>

            <div class="row mb-3">
                <div class="col-md-6">
                    <%= form.label :nome_utente, "Username", class: "form-label" %>
                    <%= form.text_field :nome_utente, class: "form-control", required: true %>
                </div>
                <div class="col-md-6">
                    <%= form.label :password, "Password", class: "form-label" %>
                    <%= form.password_field :password, class: "form-control", required: true, 
                        pattern: "^(?=.*\\d)(?=.*[A-Z])(?=.*[a-z])(?=.*[\\?\\!\\$\\%\\&\\/\\+\\-\\#\\=]).{8,}$", title: "Inserire password forte" %>
                    <small id="passwordHelp" class="form-text text-muted">
                        <b style="color:lightgray;">Password forte: almeno una lettera minuscola, una maiuscola, un numero e un simbolo tra ? ! $ % & / + - # =</b>
                    </small>
                </div>
            </div>
        
            <div class="row mb-3">
                <%= form.label :propic, "Foto profilo", class: "form-label" %>  
                <%= form.file_field :propic, class: "form-control", required: true, accept: ".jpg,.jpeg,.png,.bmp" %>
                <small id="propicHelp" class="form-text text-muted">
                    <b style="color:lightgray;"> Formato foto: .jpeg .jpg .png .bmp </b>
                </small>
            </div>
        
            <div class="col-md-12">
                <%= form.label :bio, "Bio", class: "form-label" %>  
                <%= form.text_area :bio, class: "form-control", rows: 5 %>
            </div>
        
            <div class="separator"></div>
            <div class="row">
                <div class="col-md-8 offset-md-2">
                    <%= form.submit "Avanti", class: "btn btn-dark w-100" %>
                </div>
            </div>
        <% end %>        
    </div>
</div>


<style>
    input.invalid {
        border-color: red;
    }

    input.invalid:focus {
        box-shadow: 0 0 5px 1px red;
    }

    input.invalid::after {
        content: attr(title);
        color: red;
        display: block;
        margin-top: 5px;
    }
</style>

<script>
        document.addEventListener('DOMContentLoaded', function() {
            const inputs = document.querySelectorAll('input[required], input[pattern]');
            const propicInput = document.getElementById('propic');

            inputs.forEach(input => {
                input.addEventListener('blur', function() {
                    if (!this.checkValidity()) {
                        this.classList.add('invalid');
                    } else {
                        this.classList.remove('invalid'); }
                });

                input.addEventListener('input', function() {
                    if (this.checkValidity()) {
                        this.classList.remove('invalid'); }
                });
            });
        });

        document.addEventListener('DOMContentLoaded', function() {
            const inputs = document.querySelectorAll('input[required], input[pattern]');
            const passwordInput = document.querySelector('input[name="user[password]"]');
            let passwordGenerated = false;

            inputs.forEach(input => {
                input.addEventListener('blur', function() {
                    if (!this.checkValidity()) {
                        this.classList.add('invalid');
                    } else {
                        this.classList.remove('invalid');}
                });

                input.addEventListener('input', function() {
                    if (this.checkValidity()) {
                        this.classList.remove('invalid'); }
                });
            });

            passwordInput.addEventListener('focus', function() {
                if (areAllPreviousFieldsFilled() && !passwordGenerated) {
                    const generatedPassword = generateRandomPassword();
                    const useGeneratedPassword = confirm(`Vuoi usare la password generata? \n${generatedPassword}`);
                    if (useGeneratedPassword) {
                        passwordInput.value = generatedPassword;
                    } else {
                        passwordInput.value = ''; }

                passwordGenerated = true;  }
            });

            function areAllPreviousFieldsFilled() {
                const fields = [
                'nome', 'cognome', 'cf', 'data_nascita',
                'citta_nascita', 'indirizzo_residenza', 'mail',
                'ruolo', 'nome_utente'
                ];
                for (let fieldName of fields) {
                    const field = document.querySelector(`input[name="user[${fieldName}]"], select[name="user[${fieldName}]"]`);
                    if (!field || !field.checkValidity()) {
                        return false; }
                }

                return true;
            }

            function generateRandomPassword() {
                const length = 8;
                const charset = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789?!$%&/+ #=";
                let password = "";
                let hasLower = false, hasUpper = false, hasDigit = false, hasSpecial = false;

                while (!hasLower || !hasUpper || !hasDigit || !hasSpecial) {
                    password = "";
                    hasLower = hasUpper = hasDigit = hasSpecial = false;
                    for (let i = 0; i < length; i++) {
                        const char = charset.charAt(Math.floor(Math.random() * charset.length));
                        if (/[a-z]/.test(char)) hasLower = true;
                        if (/[A-Z]/.test(char)) hasUpper = true;
                        if (/[0-9]/.test(char)) hasDigit = true;
                        if (/[\?\!\$\%\&\/\+\-\#\=]/.test(char)) hasSpecial = true;
                    password += char; }
                }

            return password; 
            }
        });

</script>
